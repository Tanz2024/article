// Prisma schema for PostgreSQL
// Run `npx prisma init` after this to generate .env and Prisma client

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  firstName String?
  middleName String?
  lastName  String?
  phoneNumber String?
  gender    String?  // Gender field
  country   String?
  location  String?
  language  String?  @default("English")
  timezone  String?  @default("UTC")
  skills    String[] // Array of user skills
  interests String[] // Array of user interests
  birthday  String?  // Store birthday as string
  avatar    String?  // Profile picture URL
  bio       String?  // User bio
  role      String   @default("user") // user, admin
  isActive  Boolean  @default(true)
  isBanned  Boolean  @default(false)
  articles  Article[]
  comments  Comment[]
  bookmarks Bookmark[]
  likes     Like[]
  notifications Notification[]
  badges    Badge[]
  // Social connections
  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")
  profileViews ProfileView[] @relation("ProfileViews")
  profileViewsReceived ProfileView[] @relation("ProfileViewsReceived")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(120) // Max 120 chars
  content     String   @db.Text
  summary     String?  @db.VarChar(300) // Optional summary
  imageUrl    String?  // Thumbnail image
  videoUrl    String?  // Video content
  category    String
  tags        String[]
  status      String   @default("pending") // pending, approved, rejected, featured
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    Int?
  views       Int      @default(0)
  likes       Int      @default(0)
  shares      Int      @default(0)
  isFeatured  Boolean  @default(false)
  rejectionReason String? // Admin reason for rejection
  comments    Comment[]
  bookmarks   Bookmark[]
  userLikes   Like[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  @@map("articles")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  parentId  Int?     // For nested comments
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  isApproved Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Bookmark {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
  @@map("bookmarks")
}

model Like {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
  @@map("likes")
}

model Analytics {
  id          Int      @id @default(autoincrement())
  articleId   Int?
  userId      Int?
  event       String   // view, like, share, comment
  userAgent   String?
  ipAddress   String?
  referrer    String?
  timestamp   DateTime @default(now())

  @@map("analytics")
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String   // info, success, warning, etc.
  message   String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
}

model Badge {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  icon      String
  label     String
  earned    Boolean  @default(false)
  earnedAt  DateTime?
  createdAt DateTime @default(now())
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}

model ProfileView {
  id       Int      @id @default(autoincrement())
  viewer   User     @relation("ProfileViews", fields: [viewerId], references: [id])
  viewerId Int
  viewed   User     @relation("ProfileViewsReceived", fields: [viewedId], references: [id])
  viewedId Int
  createdAt DateTime @default(now())

  @@unique([viewerId, viewedId])
  @@map("profile_views")
}
